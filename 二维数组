## 数组的定义和访问

### `一、背景故事`

期末考试，老师要把每个同学的成绩存储起来，以后进行最高分、最低分、平均分等统计，还要将成绩从高到低排序输出

#### 1、数组的定义

如果有多个同类的数据（例如成绩），可以通过数组进行存储和访问。

```c
int a[5];
定义一个整数数组，里面有5个整数元素：
int：类型
a：变量名
[]：表示是一个数组
5：数组的长度（容量）
```

`理解`：向系统申请一个容纳5个int数据的空间，返回这个空间的地址，用a来表示这个地址。

#### 2、数组元素的赋值

| 下标     | 0    | 1    | 2    | 3    | 4    |
| :------- | :--- | :--- | :--- | :--- | :--- |
| 元素     | a[0] | a[1] | a[2] | a[3] | a[4] |
| 元素的值 | 1    | 空   | 空   | 空   | 空   |

```c
int a[5];
a[0] = 1; //给第一个元素赋值
cout << a[0]; //输出第一个元素的值
```

#### 3、数组的访问

下标是从0开始，到数组长度－1为止，可以用循环来访问。

```c
for(int i=0; i<5; i++)
    cout << a[i] << " ";
```

#### 4、快速初始化

在数组定义的同时可以进行初始化，使用大括号{}。

```c
int a[5] = {90, 85, 70, 48, 91};
cout << a[0];  //输出90
```

| 下标     | 0    | 1    | 2    | 3    | 4    |
| :------- | :--- | :--- | :--- | :--- | :--- |
| 元素     | a[0] | a[1] | a[2] | a[3] | a[4] |
| 元素的值 | 90   | 85   | 70   | 48   | 91   |

如果大括号里面的值比数组长度少，那么多出来的下标对应的值都是0。如

```c
int a[5] = {90, 85, 70};
cout << a[0];  //输出90
cout << a[3]; //输出0
```

### `二、扩展理解`

#### 1、数组的理解

- 数组的定义：向系统申请一块空间。
- 数组名称：一个int变量，里面存储的是空间的地址。
- 数组下标：按照数组类型的大小，按空间地址往后移动。

例子：

```c
  int a[3];
  cout << "数组：" << a << endl; 
  cout << "元素0：" << &a[0] << endl; //&符号表示a[0]变量的地址
  cout << "元素1：" << &a[1] << endl;
  cout << "元素2：" << &a[2] << endl;
```

输出结果：

```c
数组：0x7ffc66ee2900
元素0：0x7ffc66ee2900
元素1：0x7ffc66ee2904
元素2：0x7ffc66ee2908
```

`理解`：

- 数组a的地址，就是第一个元素a[0]的地址。
- a[1]的地址，是元素a[0]地址加上4（int类型4个字节，等于32位）
- a[2]的地址，是元素a[1]地址加上4

| 变量 | 地址           |
| :--- | :------------- |
| a    | 0x7ffc66ee2900 |
| a[0] | 0x7ffc66ee2900 |
| a[1] | 0x7ffc66ee2904 |
| a[2] | 0x7ffc66ee2908 |

#### 2、下标的理解

下标实际上就是在数组a的地址上，按照数据类型（大小）往后移动。 a[n]：a的地址 + n * 4

| 变量  | 地址           | 地址公式 |
| :---- | :------------- | :------- |
| a     | 0x7ffc66ee2900 |          |
| a[0]  | 0x7ffc66ee2900 |          |
| a[1]  | 0x7ffc66ee2904 | a + 4    |
| ...   |                |          |
| a[10] | 0x7ffc66ee2940 | a + 10*4 |

